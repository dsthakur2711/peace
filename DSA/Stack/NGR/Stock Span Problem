// Stock Span Problem:
// The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we need to calculate span of stock’s price for all n days.
// The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, for which the price of the stock on the current day is less than or equal to its price on the given day.
// For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding 7 days are {1, 1, 1, 2, 1, 4, 6}

//Solution:
// 1. Find the Next Greater to Left index for each day
// 2. Use the Next Greater to Left index to calculate the span for each day
// 3. Return the span for each day

#include<bits/stdc++.h>

using namespace std;


// Helper: Next Greater to Left indices <- this is the same code as NGL
// NGLIndex (Next Greater to Left index) helps in Stock Span by finding the last day with a higher price, allowing span[i] = i - NGLIndex[i]
vector<int> NGLIndex(vector<int>& arr) {
    int n = arr.size();
    vector<int> result(n);
    stack<int> s;

    for(int i = 0; i < n; i++) {
        while(!s.empty() && arr[s.top()] <= arr[i]) {
            s.pop();
        }

        if(s.empty()) {
            result[i] = -1;
        } else {
            result[i] = s.top();
        }

        s.push(i);
    }

    return result;
}

// Stock Span using NGL helper
vector<int> stockSpan(vector<int>& prices) {
    vector<int> ngl = NGLIndex(prices);
    vector<int> span(prices.size());

    for(int i = 0; i < prices.size(); i++) {
        if(ngl[i] == -1) {
            span[i] = i + 1;
        } else {
            span[i] = i - ngl[i];
        }
    }

    return span;
}

int main() {
    vector<int> prices = {100, 80, 60, 70, 60, 75, 85};
    vector<int> result = stockSpan(prices);

    for(int x : result) {
        cout << x << " ";
    }
    // Output: 1 1 1 2 1 4 6
    return 0;
}